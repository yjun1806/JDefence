// automatically generated by the FlatBuffers compiler, do not modify

package com.teamnova.server.object;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class RoomList extends Table {
  public static RoomList getRootAsRoomList(ByteBuffer _bb) { return getRootAsRoomList(_bb, new RoomList()); }
  public static RoomList getRootAsRoomList(ByteBuffer _bb, RoomList obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public RoomList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public RoomInfo roomList(int j) { return roomList(new RoomInfo(), j); }
  public RoomInfo roomList(RoomInfo obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int roomListLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }

  public static int createRoomList(FlatBufferBuilder builder,
      int room_listOffset) {
    builder.startObject(1);
    RoomList.addRoomList(builder, room_listOffset);
    return RoomList.endRoomList(builder);
  }

  public static void startRoomList(FlatBufferBuilder builder) { builder.startObject(1); }
  public static void addRoomList(FlatBufferBuilder builder, int roomListOffset) { builder.addOffset(0, roomListOffset, 0); }
  public static int createRoomListVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRoomListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endRoomList(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

