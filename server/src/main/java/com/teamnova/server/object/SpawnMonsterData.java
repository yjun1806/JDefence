// automatically generated by the FlatBuffers compiler, do not modify

package com.teamnova.server.object;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class SpawnMonsterData extends Table {
  public static SpawnMonsterData getRootAsSpawnMonsterData(ByteBuffer _bb) { return getRootAsSpawnMonsterData(_bb, new SpawnMonsterData()); }
  public static SpawnMonsterData getRootAsSpawnMonsterData(ByteBuffer _bb, SpawnMonsterData obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public SpawnMonsterData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int playerName() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int health() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public Location monsterLocation() { return monsterLocation(new Location()); }
  public Location monsterLocation(Location obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public int MonsterType() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean IsAlreadySpawn() { int o = __offset(12); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createSpawnMonsterData(FlatBufferBuilder builder,
      int player_name,
      int health,
      int monsterLocationOffset,
      int MonsterType,
      boolean IsAlreadySpawn) {
    builder.startObject(5);
    SpawnMonsterData.addMonsterType(builder, MonsterType);
    SpawnMonsterData.addMonsterLocation(builder, monsterLocationOffset);
    SpawnMonsterData.addHealth(builder, health);
    SpawnMonsterData.addPlayerName(builder, player_name);
    SpawnMonsterData.addIsAlreadySpawn(builder, IsAlreadySpawn);
    return SpawnMonsterData.endSpawnMonsterData(builder);
  }

  public static void startSpawnMonsterData(FlatBufferBuilder builder) { builder.startObject(5); }
  public static void addPlayerName(FlatBufferBuilder builder, int playerName) { builder.addInt(0, playerName, 0); }
  public static void addHealth(FlatBufferBuilder builder, int health) { builder.addInt(1, health, 0); }
  public static void addMonsterLocation(FlatBufferBuilder builder, int monsterLocationOffset) { builder.addOffset(2, monsterLocationOffset, 0); }
  public static void addMonsterType(FlatBufferBuilder builder, int MonsterType) { builder.addInt(3, MonsterType, 0); }
  public static void addIsAlreadySpawn(FlatBufferBuilder builder, boolean IsAlreadySpawn) { builder.addBoolean(4, IsAlreadySpawn, false); }
  public static int endSpawnMonsterData(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

