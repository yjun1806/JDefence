// automatically generated by the FlatBuffers compiler, do not modify

package com.teamnova.server.object;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class PlayerData extends Table {
  public static PlayerData getRootAsPlayerData(ByteBuffer _bb) { return getRootAsPlayerData(_bb, new PlayerData()); }
  public static PlayerData getRootAsPlayerData(ByteBuffer _bb, PlayerData obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public PlayerData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String CharacterName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer CharacterNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer CharacterNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public int playerName() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int health() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public Position playerPosition() { return playerPosition(new Position()); }
  public Position playerPosition(Position obj) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public boolean IsAlive() { int o = __offset(12); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean IsAttacking() { int o = __offset(14); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public int AttackCountNumber() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean IsSkillUsing() { int o = __offset(18); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public int SkillNumber() { int o = __offset(20); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createPlayerData(FlatBufferBuilder builder,
      int CharacterNameOffset,
      int player_name,
      int health,
      int playerPositionOffset,
      boolean IsAlive,
      boolean IsAttacking,
      int AttackCountNumber,
      boolean IsSkillUsing,
      int SkillNumber) {
    builder.startObject(9);
    PlayerData.addSkillNumber(builder, SkillNumber);
    PlayerData.addAttackCountNumber(builder, AttackCountNumber);
    PlayerData.addPlayerPosition(builder, playerPositionOffset);
    PlayerData.addHealth(builder, health);
    PlayerData.addPlayerName(builder, player_name);
    PlayerData.addCharacterName(builder, CharacterNameOffset);
    PlayerData.addIsSkillUsing(builder, IsSkillUsing);
    PlayerData.addIsAttacking(builder, IsAttacking);
    PlayerData.addIsAlive(builder, IsAlive);
    return PlayerData.endPlayerData(builder);
  }

  public static void startPlayerData(FlatBufferBuilder builder) { builder.startObject(9); }
  public static void addCharacterName(FlatBufferBuilder builder, int CharacterNameOffset) { builder.addOffset(0, CharacterNameOffset, 0); }
  public static void addPlayerName(FlatBufferBuilder builder, int playerName) { builder.addInt(1, playerName, 0); }
  public static void addHealth(FlatBufferBuilder builder, int health) { builder.addInt(2, health, 0); }
  public static void addPlayerPosition(FlatBufferBuilder builder, int playerPositionOffset) { builder.addOffset(3, playerPositionOffset, 0); }
  public static void addIsAlive(FlatBufferBuilder builder, boolean IsAlive) { builder.addBoolean(4, IsAlive, false); }
  public static void addIsAttacking(FlatBufferBuilder builder, boolean IsAttacking) { builder.addBoolean(5, IsAttacking, false); }
  public static void addAttackCountNumber(FlatBufferBuilder builder, int AttackCountNumber) { builder.addInt(6, AttackCountNumber, 0); }
  public static void addIsSkillUsing(FlatBufferBuilder builder, boolean IsSkillUsing) { builder.addBoolean(7, IsSkillUsing, false); }
  public static void addSkillNumber(FlatBufferBuilder builder, int SkillNumber) { builder.addInt(8, SkillNumber, 0); }
  public static int endPlayerData(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

