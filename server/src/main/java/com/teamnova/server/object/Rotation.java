// automatically generated by the FlatBuffers compiler, do not modify

package com.teamnova.server.object;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Rotation extends Table {
  public static Rotation getRootAsRotation(ByteBuffer _bb) { return getRootAsRotation(_bb, new Rotation()); }
  public static Rotation getRootAsRotation(ByteBuffer _bb, Rotation obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Rotation __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Pitch() { int o = __offset(4); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float Roll() { int o = __offset(6); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float Yaw() { int o = __offset(8); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }

  public static int createRotation(FlatBufferBuilder builder,
      float Pitch,
      float Roll,
      float Yaw) {
    builder.startObject(3);
    Rotation.addYaw(builder, Yaw);
    Rotation.addRoll(builder, Roll);
    Rotation.addPitch(builder, Pitch);
    return Rotation.endRotation(builder);
  }

  public static void startRotation(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addPitch(FlatBufferBuilder builder, float Pitch) { builder.addFloat(0, Pitch, 0.0f); }
  public static void addRoll(FlatBufferBuilder builder, float Roll) { builder.addFloat(1, Roll, 0.0f); }
  public static void addYaw(FlatBufferBuilder builder, float Yaw) { builder.addFloat(2, Yaw, 0.0f); }
  public static int endRotation(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

