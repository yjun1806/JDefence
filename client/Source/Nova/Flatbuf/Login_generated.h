// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOGIN_H_
#define FLATBUFFERS_GENERATED_LOGIN_H_

#include "flatbuffers/flatbuffers.h"

struct Login;

struct Login FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_PASSWORD = 6,
    VT_ISLOGINOK = 8
  };
  const flatbuffers::String *ID() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  const flatbuffers::String *Password() const {
    return GetPointer<const flatbuffers::String *>(VT_PASSWORD);
  }
  bool IsLoginOk() const {
    return GetField<uint8_t>(VT_ISLOGINOK, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(ID()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(Password()) &&
           VerifyField<uint8_t>(verifier, VT_ISLOGINOK) &&
           verifier.EndTable();
  }
};

struct LoginBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ID(flatbuffers::Offset<flatbuffers::String> ID) {
    fbb_.AddOffset(Login::VT_ID, ID);
  }
  void add_Password(flatbuffers::Offset<flatbuffers::String> Password) {
    fbb_.AddOffset(Login::VT_PASSWORD, Password);
  }
  void add_IsLoginOk(bool IsLoginOk) {
    fbb_.AddElement<uint8_t>(Login::VT_ISLOGINOK, static_cast<uint8_t>(IsLoginOk), 0);
  }
  explicit LoginBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LoginBuilder &operator=(const LoginBuilder &);
  flatbuffers::Offset<Login> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Login>(end);
    return o;
  }
};

inline flatbuffers::Offset<Login> CreateLogin(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> ID = 0,
    flatbuffers::Offset<flatbuffers::String> Password = 0,
    bool IsLoginOk = false) {
  LoginBuilder builder_(_fbb);
  builder_.add_Password(Password);
  builder_.add_ID(ID);
  builder_.add_IsLoginOk(IsLoginOk);
  return builder_.Finish();
}

inline flatbuffers::Offset<Login> CreateLoginDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *ID = nullptr,
    const char *Password = nullptr,
    bool IsLoginOk = false) {
  return CreateLogin(
      _fbb,
      ID ? _fbb.CreateString(ID) : 0,
      Password ? _fbb.CreateString(Password) : 0,
      IsLoginOk);
}

#endif  // FLATBUFFERS_GENERATED_LOGIN_H_
